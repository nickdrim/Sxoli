Νικόλαος Δρυμούσης							   ΑΜ:1115201500037

						PROJECT 1

Περιεχόμενα:

Η εργασια αποτελειται απο 11 αρχεια.7 απο αυτα ειναι .c αρχεια 3 .h και 1 Makefile.

Compilation:

Για compilation γραφεται απλα make εφοσον υπαρχει makefile.

Εντολη εκτελεσης:

Η εντολη εκτελεσης γινεται αυστηρα με τον τροπο που εχει δωθει απο την εκφωνηση,δηλαδη :

./myprime -l lb -u ub -w NumofChildren

Παρατηρήσεις:

Το προγραμμα εχει ελεγχθει με valgrind και σε οσες περιπτωσεις εχω ελεγξει καταφερνει επιτυχως να αποδεσμευσει ολη τη μνημη που χρησιμοποιει.

Οσων αφορα για την εντολη εκτελεσης επιτρεπω στο χρηστη να βαλει και αρνητικο αριθμο στο lowerbound ωστοσο μεσα στο προγραμμα αν ειναι < 0 το
lowerbound γινεται 1 απλα στο τελος θα εκτυπωθει το διαστημα με το αρχικο lowerbound.Επισης εχω θεση ενα limit στο NumofChildren καθως παρατηρησα
οτι ειχε αρνητικες επιπτωσεις στον υπολογιστη μου.Το οριο αυτο δεν ξεπερναει το 100.Αλλο ενα οριο στο NumofChildren προκυπτει αναλογα με το οριο που
εχει δωθει απο το χρηστη.Για παραδειγμα σε ενα σιαστημα απο [1,100] δεν μπορουμε να εχουμε πανω απο 10 διεργασεις καθως χαλανε τα διαστημα. Αν
πεσουμε σε αυτη τη περιπτωση το νεο NumofChildren θα ειναι ισο με τη ριζα της αφαιρεσης τον ακρων του σιαστηματος.

Τα τρια προγραμματα που χρησιμοποιω για την ευρεση πρωτων αριθμων ειναι τα δυο που δοθηκαν απο την εκφωνηση και το τριτο ειναι ο αλγοριθμος του
sieve of Eratosthenes(Για καποιο λογο σε αυτον τον αλγοριθμο οταν βαζουμε πολλαπλασια του 3 για numofchildren δεν βγαζει ολα τα αποτελεσματα).
Καθε ενας απο αυτους τους αλγοριθμους βρισκει τους πρωτους στο διαστημα που του δινεται και τους αποθηκευει σε ενα array το οποιο το στελνει στη
διεργασια που τη καλεσε με ενα named pipe.Επισης κατασκευαζει και εναν πινακα time_arr ο οποιος επιστρεφει το χρονο που εκανε να βρεθει ο αριθμος στο αντιστοιχο κελι
του αλλου πινακα array.Επιστρεφει τελος εναν counter ωστε να ξερουμε ποσα αντικειμενα ειναι στο array που θα σταλθει και το συνολικο χρονο που εκανε η διεργασια
για να ολοκληρωση.

Οι πρωτοι αριθμοι αποθηκευονται σε μια λιστα η οποια περιεχει μια μεταβλητη για την αποθηκευση τους καθως και μια μεταβλητη item_time για το χρονο που
χρειαστηκε για να βρεθει.

Κυριως προγραμμα:

Αφου ολες οι παραμετροι απο τη γραμμη εντολων ειναι σωστες το προγραμμα myprime καλει το calculate.c στο οποιο γινονται ολως ο συγχρονισμος.
Αρχικα τα διαστηματα υπολογιζονται απο την αρχη σε ενα πινακα bounds[numofChildren][numofChildren+1] και οι διεργασιες που καλουν την exec
διαχειριζονται καταλληλα πιο απο τα διστηματα θα στειλουν.Ακομα δημιουργουμε εναν δυσδιαστατο πινακα για τα pipes pipefd[numofchildren][2]
τα οποια κλεινουν καταλληλα ,σε καθε διεργασια, οσα δεν χρειαζονται.Στη συνεχεια ξεκιναει η fork και ξεκινανε οι διαδικασιες.Για τη poll
δημηουργουνται fifo files με διαφορετικα ονοματα αναλογα σε ποια διεργασια ειμαστε. Επισης για καθε exec δημιουργειται ενα ξεχωριστο 
argument list για να περαστει στο προγραμμα.
Δυστυχως δεν καταφερα να φτιαξω τις διεργασιες να επιλεγουν ποιον αλγοριθμο θα χρησιμοποιησουν με βαση ποιους αλγοριθμους χρησιμοποιουν τα ξαδερφια τους
αλλα μεσα στα ιδια τα παιδια εναλασσονται οι αλγοριθμοι.
Η ριζα συνεχιζει να κανει fork μεχρι τη τελευταια της επαναληψη(οταν δηλαδη ειναι ιση με numofChildren) και τοτε περιμενει τα παιδια της 
να τελειωσουν για να συνεχισει με τα read απο τα pipe.ΤΟ ιδιο ισχυει και για τους ενδιαμεσουν κομβους.Σταματανε να κανουν fork οταν και αυτες γινουν ισες
με numofCHildren και περιμενουν τα παιδια τους για να τελειωσουν ωστε να διαβασουν απο τα named pipes(fifo αρχεια) και να γραψουν στα αντιστοιχα pipes
για να τα στειλουν στη ριζα.

Σημειωσεις:
Καλο θα ηταν μετα απο καθε εκτελεση να γινεται ενα make clean ωστε να διαγραφονται ολα τα fifo files απο τον φακελο εκτελεσης.

