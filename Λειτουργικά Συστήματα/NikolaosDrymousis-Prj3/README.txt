Νικόλαος Δρυμούσης							   ΑΜ:1115201500037

						PROJECT 1

Περιεχόμενα:

Η εργασια αποτελειται απο 9 αρχεια. 4 απο αυτα ειναι .c αρχεια, 4.h και 1 Makefile

Compilation:

Για compilation γραφεται απλα make εφοσον υπαρχει makefile.

Εντολη εκτελεσης:

-chef:

Η εντολη εκτελεσης γινεται ακριβως οπως οριζει η εκφωνηση με αυστηρη σειρα στα flags.Δηλαδη:

./chef -n numOfSlds -m mantime

-saladmaker:

Η εντολη εκτελεσης γινεται οπως οριζει η εκφωνηση ,με αυστηρη σειρα στα flags, με μονη διαφορα
τη προσθηκη ενως ακομα flag -i ingredient με το οποιο οριζεται η λειτουργια του σαλατοποιου(δηλαδη
αν εχει ως υλικο τη τοματα ή κερμμυδι ή πιπερια).Δηλαδη:

./saladmaker -t1 lb -t2 ub -s shmid -i ingredient

Παρατηρήσεις:

Το προγραμμα εχει ελεγχθει με valgrind και σε οσες περιπτωσεις εχω ελεγξει καταφερνει επιτυχως 
να αποδεσμευσει ολη τη μνημη που χρησιμοποιει.Ωστοσο βγαζει καποια warning για τα sem_open, το 
οποιο ειναι προβλημα που εχει αναφερθει στο piazza αλλα δεν εχει αναφερθει λυση του και δεν μπορουσα 
να το διορθωσω.

Για τις εντολες εκτελεσης αυτη για του chef ειναι προφανης.Ωστοσο για το saladmaker η διαδικασια ειναι η
εξης.Πρωτα εκτελειται το προγραμμα chef με τις επιθυμητες τιμες.Στη συνεχεια το chef προγραμμα κανει print 
το κλειδι που εχει το κοινο τμημα μνημης. Με βαση αυτο τον αριθμο βαζουμε και στην εντολη εκτελεσης του 
saladmaker στο shmid.Τελος οπως αναφερθηκε παραπανω επιλεγουμε και ποιο θα ειναι το βασικο συστατικο
του εν λογω saladmaker.Μπορει να υπαρχει μονο ενας saladmaker με το εν λογω συστατικο.

Τελος θα χρειαστουν τεσσερα τουλαχιστον instances του terminal ωστε να εκτελεστουν επιτυχως τα προγραμματα

Το προγραμμα help.c περιεχει μονο βοηθητικες δικες μου συναρτησεις (ειναι ουσιαστικα σαν ενα library)

Το προγραμμα shared_memory.c περιεχει συναρτησεις που αποκτουν το κοινο τμημα μνημης και το επιστρεφουν στα 
προγραμματα, καθως επισης και συναρτησεις που καταστρεφουν αυτο το τμημα μνημης. Αποφασισα να ξεχωρισω 
αυτες τις λειτουργιες απο τα προγραμμα ωστε να ειναι πιο καθαρα και να μην επαναλαμβανεται κωδικας.Σε
αυτο το αρχειο περιεχεται και η συναρτηση που εχω γραψει για logging.

Το shared_memory.h περιεχει ολες τις βιβλιοθηκες που θα χρειαστουμε για το προγραμμα και μερικες defined 
μεταβλητες. Περιεχει επισης και το struct που χρησιμοποιουμε για το shared memory(ουσιαστικα το table)
Το οποιο περιχει τρεις int μεταβλητες και 4 μεταβλητες pid_t.Οι μεταβλητες int αντιστοιχουν στα υλικα 
της σαλατας και παιρνουν τιμες απο 0 εως 1(Το 0 δηλωνει απουσια του υλικο και το 1 την υπαρξη του στο τραπεζι).
Μονο δυο μεταβλητες μπορουν να ειναι 1 καθε φορα. Τελος οι μεταβλητες pid_t αντιστοιχουν στοid του καθε process 
και βοηθανε στην επικοινωνια μεταξυ των διεργασιων.

Το saladmaker.h περιεχει μερικα define και ορισματα συναρτησεων καθως επισης και ενα struct ingredients το οποιο
ειναι ουσιαστικα το τραπεζει εργασιας του σαλατοποιου και περιεχει 3 int (αντιστοιχη λογικη με το table struct)
και ενα string που οριζει το υλικο που χρησιμοποιει ο συγκεκριμενος σαλατοποιος.

Κυριως προγραμματα:

Στην αρχη οπως ειπαμε εκτελειται το προγραμμα chef και δεσμευει το τμημα κοινης μνημης που θα χρησιμοποιησουμε.
Στη συνεχεια,και εφοσων δεν υπαρξει error, θα περιμενει μεχρι να συνδεθουν ολοι oi saladmaker στο κομματι της 
κοινης μνημη.Εντομεταξυ οσοι saladmaker εχουν συνδεθει, πριν συνδεθει και ο τριτος, περιμενουν και αυτοι
να συνδεθει.Καθε φορα που συνδεεται ενας σαλατοποιος ειδοποιει με ενα SIGUSER1 signal τον chef οτι εχει συνδεθει.
Μολις συνδεθουν ολοι ο chef σταματα να περιμενει και στελνει μηνυματα στους saladmaker να ξεκινησουν και αυτοι.
Στη συνεχεια ξεκιναει μια επαναληψη while μεχρι να μην υπαρχουν αλλες σαλατες να φτιαχτουν. Επιλεγει δυο υλικα απο
τη τσαντα τα οποια δεν μπορουν να ιδια μεταξυ τους, καθως και ιδια με τα συστατικα που επιλεχθηκαν στη προηγουμενη
επαναληψη, οπως αναφερεται στην εκφωνηση. Αυξανει αναλογα τα συστατικα τις αντιστοιχες μεταβλητες int του table
struct και ειδοποιει τον αντιστοιχο saladmaker αυξανοντας τον αντιστοιχο σημαφωρο του saladmaker.(υπαρχουν 4
σημαφοροι ενας για τον producer και 3 για τους consumer) και περιμενει να αυξηθει ο σεμαφωρος του για να συνεχισει.
Ο saladmaker εφοσων αυξηθηκε ο σεμαφωρος του μπαινει στο critical section και αυξανει τις μεταβλητες του bag του
με βαση τα υλικα που βρισκονται στο τραπεζι(table struct) και μειωνει τις αντιστοιχες μεταβλητες.Ετσι ολα τα υλικα
στο struct bag του σαλατοποιου θα ειναι 1, το οποιο σημαινει οτι μπορουμε να φτιαξουμε τη σαλατα.Στη συνεχεια "δουλευει"
για μη προκαθορισμενο χρονο ο οποιος ειναι μεταξυ των τιμων των argument που δωσαμε στο command line(lb και ub).Τελος 
αυξανειτο σεμαφωρο του chef και στη συνεχεια περιμενει να ερθουν παλι τα υλικα.Η εκτελεση συνεχιζεται στο προγραμμα chef.
Στη συνεχειαο chef επαναλαμβανει τη παραπανω διαδικασια.Ωστοσο αν ο αριθμος των σαλατων που εχουν μεινει ειναι μικροτερος
απο τρια, τοτε ο chef με το που ανακτησει τον ελεγχο στελνει ενα μηνυμα SIGUSER1 στον σαλατοποιο ωστε να τερματησει(εφοσων
η δουλεια μοιραζεται δικαια δεν χρειαζεται να συνεχισει).Στη συνεχεια το προγραμμα τερματιζει τη λειτουργια του εκτυπωνοντας
τις επιθυμητες πληροφοριες.

Στο τελος της εκτελεσης θα εχουν παραχθει και 4 log αρχεια, 3 για τους saladmaker και ενα ενιαιο log για τον chef και τους saladmaker.
Τα ονοματα των αρχειων ειναι saladmaker1.txt saladmaker2.txt saladmaker3.txt και chef.txt.Στο τελος αυτων των logifiles βρισκονται και
οι λιστες με τα χρονικα διαστηματα.

Σημειωσεις:
1) Καλο θα ηταν μετα απο καθε εκτελεση να γινεται ενα make clean ωστε να διαγραφονται ολα τα log files απο τον φακελο εκτελεσης.

2) Με βαση το προγραμμα οταν αναφερόμαστε σε saladmaker1 ειναι για τις τοματες, saladmaker2 για τις πιπεριες και τελος
saladmaker 3 για τα κρεμμυδια.

3) Τα προγραμματα σε περιπτωση που ο chef τερματισει με SIGINT τερματιζουν και αυτα με της βοηθεια signal απο error_handler του
chef.

