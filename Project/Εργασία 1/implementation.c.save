#include "header.h"



void reading_dataset_w(CNode head, HTable records){

	FILE *fp;
	char buff[255];
	char *c,*string1,*string2,label;
	int rows;

	//Opening file
	fp=fopen("Dataset_W.csv","r");
	if(fp==NULL){
		printf("****Can't open file or file doesn't exist.****");
		exit(0);
	}

	//Counting rows of file
	rows=count_rows(fp);
	rewind(fp);
	fscanf(fp,"%s",buff);

	//Reading attributes
	for(int i=1;i<=rows;i++){
		fscanf(fp,"%s",buff);
		char *temp=malloc(255);
		strcpy(temp,buff);
		string1=strsep(&temp,",");
		string2=strsep(&temp,",");
		label=strsep(&temp,",");
		int val=atoi(label);
		/*if(val==1)
			call_clique_function(string1,string2,val)
		else
			next_project
		*/
		free(temp);
	}
	fclose(fp);
	printf("\n\n\n******COMPLETED READING OF DATASET_W******\n\n\n");
}

int count_rows(FILE *fp){

	int rows=0;
	char c;
	for(c=getc(fp); c!=EOF; c=getc(fp)){
		if(c=='\n')
			rows=rows+1;
	}
	return rows;
}


void reading_dataset_x(void){

	DIR *folder;
	DIR *subfolder;
	FILE *fp;
	struct dirent *in_folder;
	struct dirent *in_subfolder;
	char c[50]={'\0'};
	char hash[50];
	char hashname[50];
	char subpath[50];
	char path[50];

	folder=opendir("2013_camera_specs");
	if(folder==NULL){
		printf("****Failed to open directory****\n");
		exit(0);
	}

	HTable hashtable = hashInitialize();
	CNode head = NULL;

	while((in_folder=readdir(folder)) != NULL){
		memset(hash,'\0',50);
		memset(subpath,'\0',50);
		if(!strcmp(in_folder->d_name, "."))
			continue;
		if(!strcmp(in_folder->d_name, ".."))
			continue;
		strcpy(c,"2013_camera_specs/");
		strcat(c,in_folder->d_name);

		strcpy(subpath,c);
		strcat(subpath,"/");

		strcpy(hash,in_folder->d_name);
		strcat(hash,"/");
		strcat(hash,"/");

//		printf("%s\n",c);
//		printf("%s\n",hash);

		subfolder=opendir(c);
		if(subfolder==NULL){
			printf("****Failed to open subfolder****\n");
			exit(0);
		}
		while((in_subfolder=readdir(subfolder)) !=NULL){
			memset(hashname,'\0',50);
			memset(path,'\0',50);
			if(!strcmp(in_subfolder->d_name,"."))
				continue;
			if(!strcmp(in_subfolder->d_name,".."))
				continue;
			strcpy(hashname,hash);
			strcpy(path,subpath);

			strcat(path,in_subfolder->d_name);
			strcat(hashname,in_subfolder->d_name);
			printf("%s\t%s\n",hashname,path);

			cliqueListInsert(&head, hashtable ,hashname, path);
//			CALL HASH CREATE FUNCTION !!!!!!!*****
//			create_Hashtable_LinkedList(hashname,path);
//			****HASHNAME VARIABLE CONTAINS THE HASH_KEY
//			****PATH VARIABLE CONTAINS THE WHOLE PATH OF JSON FILE FOR FUTURE USE

		}
		closedir(subfolder);
	}
	closedir(folder);
	printf("\n\n\n******COMPLETED READING OF DATASET_X******\n\n\n");
	reading_dataset_w(head, hashtable);
	cliqueListPrint(head);

	free_structures(head,hashtable);
}

void free_structures(CNode head, HTable records){
	cliqueFreeList(head);
	hashFree(records);
}

void isEqual(CNode head, HTable records, char* ID1, char* ID2){

	CNode temp1=hashSearch(records, ID1);;
	CNode temp2=hashSearch(records, ID2);;

	if(strcmp(ID1,ID2) < 0){
		recordListEqualInsert(temp1,temp2);
	}else{
		recordListEqualInsert(temp2,temp1);
	}
}

void cliqueListPrint(CNode head){
  if(listEmpty(head)) return;

  RNode *visited = NULL;
  int currentSize = 0;

  CNode traverse = head;
  int i=1;

  while(traverse!=NULL){
    RNode temp = traverse->info;
    int check = 1;
    int flag = 1;

    if(!listEmpty(temp)){
      if(*visited == NULL){
        currentSize++;
        visited = malloc(sizeof(RNode)*currentSize);
        visited[0] = temp;
      }else{
        for(int j=0 ; j < currentSize ; j++){
          if(visited[j] == temp){
            flag = 0;
          }
        }
        if(flag){
          currentSize++;
          visited = realloc(visited,sizeof(RNode)*currentSize);
          visited[currentSize-1] = temp;
        }
      }
      if(flag){
        printf("Clique %d : ",i);
        i++;
      }
      
    }else check = 0;

    if(flag){
      while(temp!=NULL){
        printf("%s -> ", temp->name);
        temp = temp->next;
      }
      if(check) printf("\n");
    }
    
    traverse = traverse->right;
  }

  free(visited);
}
